#!/bin/bash

# generate .mp4 with file range 
# using conformed data from /out/png

# 0. collect .png filenames 
#    populate FILES[]
#    then use user-specified SLICE to split

# 1. choose how many files to include
#    eventually this could be done by year 
#    or some other more programmatic setting
#    then open and ideally loop (applescript) in quicktime player

# ** todo **

# 2. control playback display with quicktime player 
#    set to loop
#    minimize size of window
#    present in a grid 
#    or make ffmpeg montage mp4 (!)
#    at correct speed etc with looping
#    stamp dates on the files (see _comp)

echo "Enter slice size:";
read SLICE
    
rm ../comp/mp4/*
cd ../out
rm -rf tmp
mkdir tmp

i=0
LIMIT=$SLICE
FILES=()
for file in ../out/png/*.png; do
    if [[ ${i} -gt $LIMIT ]]; then
        ffmpeg -framerate 60 -pattern_type glob -i "tmp/*.png" -vcodec libx264 -vf format=yuv420p ../comp/mp4/out-$LIMIT.mp4
        ((LIMIT+=SLICE))
        echo $LIMIT "*** SLICE ***"
        ls tmp
        rm tmp/*
    else
        FILES[$i]=$file
        echo ${FILES[$i]}
        cp $file tmp/.
        ((i++))
    fi
done 

# 2.

rm -rf tmp
# open ../comp/mp4/out-*.mp4
cd ../comp/mp4/
pos_x=50
pos_y=50
for file in *.mp4; do
    echo "Opening file: $file"  # Print the file being opened for debugging
    full_file_path=$(pwd)/"$file"
    osascript -e "tell application \"QuickTime Player\"
                        activate
                        open POSIX file \"$full_file_path\"
                        delay 1
                        tell front document
                            set looping to true
                            set current time to 0
                            set rate to 2
                            play
                        end tell
                        set the bounds of front window to {$pos_x, $pos_y, $(($pos_x + 500)), $(($pos_y + 200))}
                    end tell"
    ((pos_x += 50))
    ((pos_y += 200))
done

exit
