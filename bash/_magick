#!/bin/bash

# generate pngs with custom text 
# using fonts in /out/ttf

# 0. init

rm ../comp/mp4/*
cd ../out
rm -rf tmp
mkdir tmp
osascript -e 'tell application "System Events" to tell process "Terminal" to keystroke "k" using command down'
sleep 0.5

# 1. collect *.png, make *.mp4
#    populate FILES[]
#    then use user-specified SLICE to split
#    and produce mp4 via ffmpeg

# echo "Enter time slice in weeks:";
# read SLICE
# echo "Enter speed [1 = 1x, 2 = 2x. 3 = 5x, 4 = 10x, 5 = 30x, 6 = 60x]:";
# read SPEED
# LIMIT=$SLICE

# https://dev.to/danburzo/how-to-make-png-font-samples-with-imagemagick-part-1-29p8

TEXTSTRING="Maybe we will develop slower eyeballs."

for font in ../out/ttf/*.ttf; do \
magick \
  -size 1000x200 \
  canvas:white \
  -font ./$font \
  -pointsize 48 \
  -gravity Center \
  -draw "text 0,0 '$TEXTSTRING'" \
"$font-sample.png"; done

#  -draw "text 0,0 'The five boxing wizards jump quickly.'" \

open out/_png
exit

i=0         
FILES=()
for file in ../out/png/*.png; do
    if [[ ${i} -gt $LIMIT ]]; then
        ffmpeg -framerate 60 -pattern_type glob -i "tmp/*.png" -vcodec libx264 -vf format=yuv420p ../comp/mp4/out-$(printf %05d $LIMIT).mp4
        ((LIMIT+=SLICE))
        echo $LIMIT "*** SLICE ***"
        ls tmp
        rm tmp/*
    else
        FILES[$i]=$file
        echo ${FILES[$i]}
        cp $file tmp/.
        ((i++))
    fi
done 





# 2. display *.mp4
#    set to loop
#    minimize size of window
#    present in a grid 
#    or make ffmpeg montage mp4 (!)
#    at correct speed etc with looping
#    stamp dates on the files (see _comp)
#    requires allowing terminal to control computer
#    in System Settings > Privacy * Security > Accessibility
#    written in concert with chaptGPT see
#    https://chat.openai.com/share/91bd7008-7407-4f62-b02a-30bb0f635284

ls ../comp/mp4
rm -rf tmp
cd ../comp/mp4/

i=0         # window counter
j=0         # window counter
pos_x=0     # window start x
pos_y=0     # window start y
win_w=400   # window width
win_h=150   # window height

get_screen_dimensions() {
    osascript -e "tell application \"Finder\" to get bounds of window of desktop" | awk '{print $3, $4}'
}
screen_width=$(get_screen_dimensions | cut -d ' ' -f 1)
screen_width=${screen_width%?}	# trim , from end of string
screen_height=$(get_screen_dimensions | cut -d ' ' -f 2)
for file in *.mp4; do
    echo "Opening file: $file"  # Print the file being opened for debugging
    echo "pos_x: $pos_x, pos_y: $pos_y"  # Print the values of pos_x and pos_y

    full_file_path=$(pwd)/"$file"
    osascript -e "tell application \"QuickTime Player\"
                        activate
                        open POSIX file \"$full_file_path\"
                        # delay 0.1
                        set bounds of front window to {$pos_x, $pos_y, $(($pos_x + $win_w)), $(($pos_y + $win_h))}
                        tell front document
                            set looping to true
                            set current time to 0
                            play
                        end tell
                    end tell"
    ((pos_x += 20))
    ((pos_y += $win_h + 10))

	# ** todo **
    # make this more fluid / variable, still could be improved for diff sized screens
    # check if the window position is below the screen height and reposition if necessary
    windowPosition=$(osascript -e "tell application \"QuickTime Player\" to get bounds of front window")
    window_x=$(echo "$windowPosition" | awk '{print $3}')
	window_x=${window_x%?}	# trim , from end of string
    window_y=$(echo "$windowPosition" | awk '{print $4}')
    if [ "$window_y" -gt "$screen_height" ]; then
        ((i++))
        pos_y=0
		pos_x=$((($win_w * i) + (i * 10)))
        osascript -e "tell application \"QuickTime Player\" to set bounds of front window to {$pos_x, 0, $(($pos_x + $win_w)), $win_h}"
    elif [ "$window_x" -gt "$screen_width" ]; then
        ((j++))
        pos_y=0
		pos_x=$((($win_w * j) + (j * 10)))
        osascript -e "tell application \"QuickTime Player\" to set bounds of front window to {$pos_x, 0, $(($pos_x + $win_w)), $win_h}"
    fi

    # set the playback speed using a keystroke (Command + Right Arrow)
    # each keystroke increases from 2x 5x 10x 30x 60x
	for ((x=1; x<$SPEED; x++)); do
    	osascript -e "tell application \"System Events\" to tell process \"QuickTime Player\" to key code 124 using command down"
	done

    # sleep 0.1
done
exit
